# -*- coding: utf-8 -*-
"""Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LhQrZUYgyociOYA5g9BBokhYIpBoatFn

## Importing the drive to have access to the images
"""

from google.colab import drive
drive.mount('/content/gdrive')

cd gdrive/

cd My\ Drive

cd Image-receipt

"""### Installing Pytesseract and tesseract libraries to be able to extract information from the receipts"""

!pip install pytesseract

!pip install tesseract

! apt install tesseract-ocr
! apt install libtesseract-dev

! pip install Pillow

"""### Installing NLTK to be able to use nlp methods so as to extract the total amount in each receipt"""

! pip install nltk

import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

"""## In this section , i have imported cv2 to be able to scan the image receipt and i used pytesseract to extract the text in the image , i created then a dictionnary that save for each image its appropriate text"""

import cv2 
import pytesseract
import os
dir = os.listdir('/content/gdrive/My Drive/Image-receipt')
texts = dict()
for file in dir:
  img = cv2.imread('/content/gdrive/My Drive/Image-receipt/'+file)
  
  txt = pytesseract.image_to_string(img)
  texts[file] = txt

texts

"""### In this section i used pickle to save the dictionnary  in a file so i can use it without keep running the code above"""

import pickle
pickle.dump(texts,open("/content/gdrive/My Drive/texts.pickle","wb"))

"""## In this section , i used the function preprocess that apply word tokenization and part-of-speech tagging to the sentence.So to be able to extract numbers after total amount in each receipt"""

def preprocess(sent):
    sent = nltk.word_tokenize(sent)
    sent = nltk.pos_tag(sent)
    return sent

"""### I created a dictionnary that save for each image receipt its tokenized sentence"""

textsprep = dict()
for k,v in texts.items():
  sent = preprocess(v)
  textsprep[k] = sent

textsprep

"""## In this section , i created a dictionnary to save for each image receipt , the part of the sentence that starts from the total amount to simplify the search of the exact total amount , it seems like only 121/200 that ocr have been able to extract from them the name total"""

AfterTotal = dict()
for k,v in textsprep.items():
  for j in range(len(v)):
    if v[j][0] == "Total"  :
      #k.append(i[j:])
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "Amount":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "Amt Due":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "TOTL":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "TOTAL EURO":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "TOTAL DUE":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "Take-Out Total":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "Grand Total":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "Amount Due":
      AfterTotal[k] = v[j:]
    elif  v[j][0] == "TOTAL":
      AfterTotal[k] = v[j:]

AfterTotal

"""## After that , i create another dictionnary that save for each image the numbers that are after the name total amount"""

Numbers = dict()
for k,v in AfterTotal.items():
  s = []
  for j in range(len(v)):
    if v[j][1] == "CD":
      s.append(v[j])
  
  Numbers[k] = s

"""### In this section , i filter the list of numbers from all the elements that are not considered numbers"""

num = dict()
for k in Numbers:
  a = Numbers[k]
  b = []
  for i in a:
    n = i[0]
    try:
      n = float(n) 
      b.append(n)
    except:
      pass
  num[k] = b

num

for k,v in num.items():
  l = []
  for i in v:
    if i <= 1000 :
      l.append(i)
  num[k] = l

num

"""### In this section , for each image receipt , i consider that the total amount is the maximum of the numbers after total amount so i create a dictionnary that save for each image receipt its total amount"""

for k,v in num.items():
  if len(v) != 0 :
     num[k] = max(v)

num

"""### In this section , i have been able to plot each image with its total amount extracted as the title of the image so as to be able to evaluate the model , after comparing the image to the total amount extracted ,  there were 60/121 that were true."""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
for k,v in num.items() :
   
    img = Image.open("/content/gdrive/My Drive/Image-receipt/"+k)

    #image = cv2.imread('/content/gdrive/My Drive/Image-receipt/'+k)
    #b,g,r = cv2.split(image)
    #rgb_img = cv2.merge([r,g,b])

    plt.figure(figsize=(16,12))
    plt.imshow(img)
    plt.title(v)
    plt.show()